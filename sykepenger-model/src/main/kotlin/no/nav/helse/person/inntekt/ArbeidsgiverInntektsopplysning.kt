package no.nav.helse.person.inntekt

import java.time.LocalDate
import java.util.UUID
import no.nav.helse.dto.deserialisering.ArbeidsgiverInntektsopplysningInnDto
import no.nav.helse.dto.serialisering.ArbeidsgiverInntektsopplysningUtDto
import no.nav.helse.etterlevelse.Subsumsjonslogg
import no.nav.helse.etterlevelse.`춶 8-15`
import no.nav.helse.hendelser.Avsender
import no.nav.helse.hendelser.OverstyrArbeidsgiveropplysninger.KorrigertArbeidsgiverInntektsopplysning
import no.nav.helse.hendelser.Periode
import no.nav.helse.hendelser.Skj칮nnsmessigFastsettelse
import no.nav.helse.hendelser.somPeriode
import no.nav.helse.person.Arbeidsgiver
import no.nav.helse.person.Opptjening
import no.nav.helse.person.PersonObserver.UtkastTilVedtakEvent.Inntektskilde
import no.nav.helse.person.aktivitetslogg.IAktivitetslogg
import no.nav.helse.person.aktivitetslogg.Varselkode
import no.nav.helse.person.bel칮p.Bel칮pstidslinje
import no.nav.helse.person.bel칮p.Kilde
import no.nav.helse.person.builders.UtkastTilVedtakBuilder
import no.nav.helse.person.inntekt.Skatteopplysning.Companion.subsumsjonsformat
import no.nav.helse.utbetalingstidslinje.Vilk친rspr칮vdSkj칝ringstidspunkt
import no.nav.helse.yearMonth
import no.nav.helse.칮konomi.Inntekt
import no.nav.helse.칮konomi.Inntekt.Companion.INGEN

internal data class ArbeidsgiverInntektsopplysning(
    val orgnummer: String,
    val gjelder: Periode,
    val faktaavklartInntekt: FaktaavklartInntekt,
    val korrigertInntekt: Saksbehandler?,
    val skj칮nnsmessigFastsatt: Skj칮nnsmessigFastsatt?,
    val bel칮pstidslinje: Bel칮pstidslinje = Bel칮pstidslinje()
) {
    val omregnet칀rsinntekt = korrigertInntekt?.inntektsdata ?: faktaavklartInntekt.inntektsdata
    val fastsatt칀rsinntekt = skj칮nnsmessigFastsatt?.inntektsdata?.bel칮p ?: omregnet칀rsinntekt.bel칮p

    private fun gjelderP친Skj칝ringstidspunktet(skj칝ringstidspunkt: LocalDate) =
        skj칝ringstidspunkt == gjelder.start

    private fun fastsatt칀rsinntekt(acc: Inntekt, skj칝ringstidspunkt: LocalDate): Inntekt {
        return acc + beregningsgrunnlag(skj칝ringstidspunkt)
    }
    private fun omregnet칀rsinntekt(acc: Inntekt, skj칝ringstidspunkt: LocalDate): Inntekt {
        return acc + omregnet칀rsinntekt(skj칝ringstidspunkt)
    }

    private fun beregningsgrunnlag(skj칝ringstidspunkt: LocalDate): Inntekt {
        if (!gjelderP친Skj칝ringstidspunktet(skj칝ringstidspunkt)) return INGEN
        return fastsatt칀rsinntekt
    }

    private fun omregnet칀rsinntekt(skj칝ringstidspunkt: LocalDate): Inntekt {
        if (!gjelderP친Skj칝ringstidspunktet(skj칝ringstidspunkt)) return INGEN
        return omregnet칀rsinntekt.bel칮p
    }

    internal fun gjelder(organisasjonsnummer: String) = organisasjonsnummer == orgnummer

    private fun overstyrMedInntektsmelding(organisasjonsnummer: String, nyInntekt: FaktaavklartInntekt): ArbeidsgiverInntektsopplysning {
        if (this.orgnummer != organisasjonsnummer) return this
        if (nyInntekt.inntektsdata.dato.yearMonth != this.omregnet칀rsinntekt.dato.yearMonth) return this
        return copy(
            faktaavklartInntekt = nyInntekt,
            korrigertInntekt = null
        )
    }

    private fun overstyrMedSaksbehandler(overstyringer: List<KorrigertArbeidsgiverInntektsopplysning>): ArbeidsgiverInntektsopplysning {
        val korrigering = overstyringer.singleOrNull { it.organisasjonsnummer == this.orgnummer } ?: return this
        // bare sett inn ny inntekt hvis bel칮p er ulikt (speil sender inntekt- og refusjonoverstyring i samme melding)
        if (korrigering.inntektsdata.bel칮p == omregnet칀rsinntekt.bel칮p && this.gjelder == korrigering.gjelder) return this
        return copy(
            gjelder = korrigering.gjelder,
            korrigertInntekt = Saksbehandler(
                id = UUID.randomUUID(),
                inntektsdata = korrigering.inntektsdata
            ),
            skj칮nnsmessigFastsatt = null
        )
    }

    private fun skj칮nnsfastsett(fastsettelser: List<Skj칮nnsmessigFastsettelse.Skj칮nnsfastsattInntekt>): ArbeidsgiverInntektsopplysning {
        val fastsettelse = fastsettelser.single { it.orgnummer == this.orgnummer }
        return copy(
            skj칮nnsmessigFastsatt = Skj칮nnsmessigFastsatt(
                id = UUID.randomUUID(),
                inntektsdata = fastsettelse.inntektsdata
            )
        )
    }

    private fun rullTilbake() = copy(skj칮nnsmessigFastsatt = null)

    private fun deaktiver(
        forklaring: String,
        oppfylt: Boolean,
        subsumsjonslogg: Subsumsjonslogg
    ): ArbeidsgiverInntektsopplysning {
        val inntekterSisteTreM친neder = when (faktaavklartInntekt.inntektsopplysning) {
            is Inntektsopplysning.Arbeidstaker -> when (faktaavklartInntekt.inntektsopplysning.kilde) {
                is Arbeidstakerinntektskilde.AOrdningen -> faktaavklartInntekt.inntektsopplysning.kilde.inntektsopplysninger
                Arbeidstakerinntektskilde.Arbeidsgiver,
                Arbeidstakerinntektskilde.Infotrygd -> emptyList()
            }
        }
        subsumsjonslogg.logg(
            `춶 8-15`(
                skj칝ringstidspunkt = omregnet칀rsinntekt.dato,
                organisasjonsnummer = orgnummer,
                inntekterSisteTreM친neder = if (korrigertInntekt == null) inntekterSisteTreM친neder.subsumsjonsformat() else emptyList(),
                forklaring = forklaring,
                oppfylt = oppfylt
            )
        )

        return this
    }

    private fun bel칮pstidslinjeForSkj칝ringstidspuntet(skj칝ringstidspunkt: LocalDate): Bel칮pstidslinje {
        // HMM, dette f칮les ut som et rart hack 游낷
        if (faktaavklartInntekt.inntektsdata.bel칮p == INGEN) return Bel칮pstidslinje()

        val fastsattInntektsdata = (skj칮nnsmessigFastsatt?.inntektsdata ?: omregnet칀rsinntekt)
        return Bel칮pstidslinje.fra(
            periode = skj칝ringstidspunkt.somPeriode(),
            bel칮p = fastsatt칀rsinntekt,
            kilde = Kilde(
                meldingsreferanseId = fastsattInntektsdata.hendelseId,
                avsender = when {
                    korrigertInntekt != null || skj칮nnsmessigFastsatt != null -> Avsender.SAKSBEHANDLER
                    // TODO: Skal Infotrygd/AOrdningen ha annen kilde? Og burde bel칮pstidslinje ha egne Avsendere enn de gjenbrukte hendelse-Avsenderne?
                    else -> Avsender.ARBEIDSGIVER
                },
                tidsstempel = fastsattInntektsdata.tidsstempel
            )
        )
    }

    internal companion object {

        internal fun List<ArbeidsgiverInntektsopplysning>.faktaavklarteInntekter(skj칝ringstidspunkt: LocalDate) = this
            .map {
                Vilk친rspr칮vdSkj칝ringstidspunkt.FaktaavklartInntekt(
                    organisasjonsnummer = it.orgnummer,
                    inntektstidslinje = Inntektstidslinje(
                        skj칝ringstidspunkt = skj칝ringstidspunkt,
                        gjelderTilOgMed = LocalDate.MAX,
                        bel칮pstidslinje = it.bel칮pstidslinjeForSkj칝ringstidspuntet(skj칝ringstidspunkt) + it.bel칮pstidslinje.fraOgMed(skj칝ringstidspunkt.plusDays(1))
                    )
                )
            }

        internal fun List<ArbeidsgiverInntektsopplysning>.validerSkj칮nnsmessigAltEllerIntet() {
            check(all { it.skj칮nnsmessigFastsatt == null } || all { it.skj칮nnsmessigFastsatt != null }) { "Enten s친 m친 alle inntektsopplysninger var skj칮nnsmessig fastsatt, eller s친 m친 ingen v칝re det" }
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.finn(orgnummer: String) =
            firstOrNull { it.gjelder(orgnummer) }

        internal fun List<ArbeidsgiverInntektsopplysning>.deaktiver(
            deaktiverte: List<ArbeidsgiverInntektsopplysning>,
            orgnummer: String,
            forklaring: String,
            subsumsjonslogg: Subsumsjonslogg
        ) =
            this.fjernInntekt(deaktiverte, orgnummer, forklaring, true, subsumsjonslogg)

        internal fun List<ArbeidsgiverInntektsopplysning>.aktiver(
            aktiveres: List<ArbeidsgiverInntektsopplysning>,
            orgnummer: String,
            forklaring: String,
            subsumsjonslogg: Subsumsjonslogg
        ): Pair<List<ArbeidsgiverInntektsopplysning>, List<ArbeidsgiverInntektsopplysning>> {
            val (deaktiverte, aktiverte) = this.fjernInntekt(aktiveres, orgnummer, forklaring, false, subsumsjonslogg)
            // Om inntektene i sykepengegrunnlaget var skj칮nnsmessig fastsatt f칮r aktivering sikrer vi at alle "rulles tilbake" slik at vi ikke lager et sykepengegrunnlag med mix av Skj칮nnsmessigFastsatt & andre inntektstyper.
            return deaktiverte to aktiverte.map { it.copy(skj칮nnsmessigFastsatt = null) }
        }

        // flytter inntekt for *orgnummer* fra *this* til *deaktiverte*
        // aktive.deaktiver(deaktiverte, orgnummer) er direkte motsetning til deaktiverte.deaktiver(aktive, orgnummer)
        private fun List<ArbeidsgiverInntektsopplysning>.fjernInntekt(
            deaktiverte: List<ArbeidsgiverInntektsopplysning>,
            orgnummer: String,
            forklaring: String,
            oppfylt: Boolean,
            subsumsjonslogg: Subsumsjonslogg
        ): Pair<List<ArbeidsgiverInntektsopplysning>, List<ArbeidsgiverInntektsopplysning>> {
            val inntektsopplysning = checkNotNull(this.singleOrNull { it.orgnummer == orgnummer }) {
                "Kan ikke overstyre arbeidsforhold for en arbeidsgiver vi ikke kjenner til"
            }.deaktiver(forklaring, oppfylt, subsumsjonslogg)
            val aktive = this.filterNot { it === inntektsopplysning }
            return aktive to (deaktiverte + listOfNotNull(inntektsopplysning))
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.overstyrMedInntektsmelding(
            organisasjonsnummer: String,
            nyInntekt: FaktaavklartInntekt
        ): List<ArbeidsgiverInntektsopplysning> {
            val endringen = this.map { inntekt -> inntekt.overstyrMedInntektsmelding(organisasjonsnummer, nyInntekt) }
            if (skalSkj칮nnsmessigFastsattRullesTilbake(endringen)) {
                return endringen.map { it.rullTilbake() }
            }
            return endringen
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.overstyrMedSaksbehandler(
            other: List<KorrigertArbeidsgiverInntektsopplysning>
        ): List<ArbeidsgiverInntektsopplysning> {
            val endringen = this.map { inntekt -> inntekt.overstyrMedSaksbehandler(other) }
            if (skalSkj칮nnsmessigFastsattRullesTilbake(endringen)) {
                return endringen.map { it.rullTilbake() }
            }
            return endringen
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.skj칮nnsfastsett(other: List<Skj칮nnsmessigFastsettelse.Skj칮nnsfastsattInntekt>): List<ArbeidsgiverInntektsopplysning> {
            check(this.size == other.size) { "alle inntektene m친 skj칮nnsfastsettes" }
            return this.map { inntekt -> inntekt.skj칮nnsfastsett(other) }
        }

        private fun List<ArbeidsgiverInntektsopplysning>.skalSkj칮nnsmessigFastsattRullesTilbake(etter: List<ArbeidsgiverInntektsopplysning>) =
            this.zip(etter) { gammelOpplysning, nyOpplysning ->
                gammelOpplysning.omregnet칀rsinntekt.bel칮p != nyOpplysning.omregnet칀rsinntekt.bel칮p
            }.any { it }

        internal fun List<ArbeidsgiverInntektsopplysning>.sjekkForNyArbeidsgiver(
            aktivitetslogg: IAktivitetslogg,
            opptjening: Opptjening,
            orgnummer: String
        ) {
            val arbeidsforholdAktiveP친Skj칝ringstidspunktet =
                singleOrNull { opptjening.ansattVedSkj칝ringstidspunkt(it.orgnummer) } ?: return
            if (arbeidsforholdAktiveP친Skj칝ringstidspunktet.orgnummer == orgnummer) return
            aktivitetslogg.varsel(Varselkode.RV_VV_8)
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.m친HaRegistrertOpptjeningForArbeidsgivere(
            aktivitetslogg: IAktivitetslogg,
            opptjening: Opptjening
        ) {
            if (none { opptjening.startdatoFor(it.orgnummer) == null }) return
            aktivitetslogg.varsel(Varselkode.RV_VV_1)
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.berik(builder: UtkastTilVedtakBuilder) = this
            .forEach { arbeidsgiver ->
                builder.arbeidsgiverinntekt(
                    arbeidsgiver = arbeidsgiver.orgnummer,
                    omregnede칀rsinntekt = arbeidsgiver.omregnet칀rsinntekt.bel칮p,
                    skj칮nnsfastsatt = arbeidsgiver.skj칮nnsmessigFastsatt?.inntektsdata?.bel칮p,
                    gjelder = arbeidsgiver.gjelder,
                    inntektskilde = if (arbeidsgiver.skj칮nnsmessigFastsatt != null || arbeidsgiver.korrigertInntekt != null)
                        Inntektskilde.Saksbehandler
                    else when (arbeidsgiver.faktaavklartInntekt.inntektsopplysning) {
                        is Inntektsopplysning.Arbeidstaker -> when (arbeidsgiver.faktaavklartInntekt.inntektsopplysning.kilde) {
                            is Arbeidstakerinntektskilde.AOrdningen -> Inntektskilde.AOrdningen
                            Arbeidstakerinntektskilde.Arbeidsgiver -> Inntektskilde.Arbeidsgiver
                            Arbeidstakerinntektskilde.Infotrygd -> Inntektskilde.Arbeidsgiver
                        }
                    }
                )
            }

        internal fun List<ArbeidsgiverInntektsopplysning>.harInntekt(organisasjonsnummer: String) =
            singleOrNull { it.orgnummer == organisasjonsnummer } != null

        internal fun List<ArbeidsgiverInntektsopplysning>.fastsatt칀rsinntekt(skj칝ringstidspunkt: LocalDate) =
            fold(INGEN) { acc, item -> item.fastsatt칀rsinntekt(acc, skj칝ringstidspunkt) }

        internal fun List<ArbeidsgiverInntektsopplysning>.totalOmregnet칀rsinntekt(skj칝ringstidspunkt: LocalDate) =
            fold(INGEN) { acc, item -> item.omregnet칀rsinntekt(acc, skj칝ringstidspunkt) }

        internal fun List<ArbeidsgiverInntektsopplysning>.finnEndringsdato(
            other: List<ArbeidsgiverInntektsopplysning>
        ): LocalDate? {
            val endringsDatoer = this.mapNotNull { ny ->
                val gammel = other.singleOrNull { it.orgnummer == ny.orgnummer }
                when {
                    gammel == null -> ny.gjelder.start
                    gammel.harFunksjonellEndring(ny) -> minOf(ny.gjelder.start, gammel.gjelder.start)
                    else -> null
                }
            }
            return endringsDatoer.minOrNull()
        }

        private fun ArbeidsgiverInntektsopplysning.harFunksjonellEndring(other: ArbeidsgiverInntektsopplysning): Boolean {
            if (this.gjelder != other.gjelder) return true
            if (this.skj칮nnsmessigFastsatt != other.skj칮nnsmessigFastsatt) return true
            if (!this.faktaavklartInntekt.funksjoneltLik(other.faktaavklartInntekt)) return true
            return this.korrigertInntekt != other.korrigertInntekt
        }

        internal fun List<ArbeidsgiverInntektsopplysning>.harGjenbrukbarInntekt(organisasjonsnummer: String) =
            singleOrNull { it.orgnummer == organisasjonsnummer }
                ?.faktaavklartInntekt
                ?.inntektsopplysning?.let { it as? Inntektsopplysning.Arbeidstaker }
                ?.kilde is Arbeidstakerinntektskilde.Arbeidsgiver

        internal fun List<ArbeidsgiverInntektsopplysning>.lagreTidsn칝reInntekter(
            skj칝ringstidspunkt: LocalDate,
            arbeidsgiver: Arbeidsgiver,
            aktivitetslogg: IAktivitetslogg,
            nyArbeidsgiverperiode: Boolean
        ) {
            this.forEach {
                val tidsn칝r = (it.faktaavklartInntekt.inntektsopplysning as? Inntektsopplysning.Arbeidstaker)?.kilde as? Arbeidstakerinntektskilde.Arbeidsgiver
                if (tidsn칝r != null) {
                    arbeidsgiver.lagreTidsn칝rInntektsmelding(
                        skj칝ringstidspunkt = skj칝ringstidspunkt,
                        orgnummer = it.orgnummer,
                        arbeidsgiverinntekt = FaktaavklartInntekt(
                            id = UUID.randomUUID(),
                            inntektsdata = it.faktaavklartInntekt.inntektsdata.copy(bel칮p = it.omregnet칀rsinntekt.bel칮p),
                            inntektsopplysning = Inntektsopplysning.Arbeidstaker(Arbeidstakerinntektskilde.Arbeidsgiver)
                        ),
                        aktivitetslogg = aktivitetslogg,
                        nyArbeidsgiverperiode = nyArbeidsgiverperiode
                    )
                }
            }
        }

        internal fun gjenopprett(dto: ArbeidsgiverInntektsopplysningInnDto): ArbeidsgiverInntektsopplysning {
            return ArbeidsgiverInntektsopplysning(
                orgnummer = dto.orgnummer,
                gjelder = Periode.gjenopprett(dto.gjelder),
                faktaavklartInntekt = FaktaavklartInntekt.gjenopprett(dto.faktaavklartInntekt),
                korrigertInntekt = dto.korrigertInntekt?.let { Saksbehandler.gjenopprett(it) },
                skj칮nnsmessigFastsatt = dto.skj칮nnsmessigFastsatt?.let { Skj칮nnsmessigFastsatt.gjenopprett(it) }
            )
        }
    }

    internal fun dto() = ArbeidsgiverInntektsopplysningUtDto(
        orgnummer = this.orgnummer,
        gjelder = this.gjelder.dto(),
        faktaavklartInntekt = this.faktaavklartInntekt.dto(),
        korrigertInntekt = this.korrigertInntekt?.dto(),
        skj칮nnsmessigFastsatt = skj칮nnsmessigFastsatt?.dto()
    )
}
